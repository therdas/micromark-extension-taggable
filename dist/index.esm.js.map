{"version":3,"file":"index.esm.js","sources":["../src/lib/options.ts","../src/lib/syntax.ts","../src/lib/html.ts"],"sourcesContent":["import { Literal } from \"unist\";\nimport * as unist from \"unist\";\nimport { Data } from \"mdast\";\n\nexport const defaultOptions: Options = {\n  classes: [\"micromark-taggable\"],\n  rules: [\n    {\n      marker: \"#\",\n      type: \"tag\",\n      toUrl: (val) => `/tags/${val}`,\n      classes: [\"tag\"],\n    },\n    {\n      marker: \"@\",\n      type: \"mention\",\n      toUrl: (val) => `/users/${val}`,\n      classes: [\"mention\"],\n    },\n  ],\n  allowEmail: false,\n};\n\nexport interface Rules {\n  marker: string;\n  type: string;\n  toUrl: (arg: string) => string;\n  classes?: Array<string>;\n}\nexport interface Taggable extends Literal {\n  type: \"taggable\";\n  ctx: string;\n  marker: string;\n  value: string;\n  url: string | undefined;\n}\n\nexport interface Options {\n  classes: Array<string>;\n  rules: Array<Rules>;\n  allowEmail?: boolean;\n}\n\nexport interface InlineTaggableData {\n  marker: string;\n  type: string;\n  url: string;\n}\n\nexport interface InlineTaggableNode extends unist.Literal {\n  type: \"taggable\";\n  value: string;\n  data: Data & InlineTaggableData;\n}\n\ndeclare module \"mdast\" {\n  interface PhrasingContentMap {\n    inlineTaggableNode: InlineTaggableNode;\n  }\n\n  interface RootContentMap {\n    inlineTaggableNode: InlineTaggableNode;\n  }\n}\n","import { codes } from \"micromark-util-symbol\";\nimport { defaultOptions, Options } from \"./options\";\nimport { markdownLineEnding } from \"micromark-util-character\";\nimport {\n  TokenizeContext,\n  Effects,\n  State,\n  Code,\n  Extension,\n  Construct,\n} from \"micromark-util-types\";\n\ndeclare module \"micromark-util-types\" {\n  interface TokenTypeMap {\n    taggable: \"taggable\";\n    taggableMarker: \"taggableMarker\";\n    taggableValue: \"taggableValue\";\n  }\n}\n\nexport function syntax(opts: Options = defaultOptions): Extension {\n  if (opts.allowEmail == undefined) opts.allowEmail = false;\n  const rules = opts.rules;\n  let valueCursor = 0;\n  const markers = [];\n  const typeMap = new Map();\n  const allowEmail = opts.allowEmail;\n\n  for (const i of rules) {\n    markers.push(i.marker);\n    typeMap.set(i.marker, i.type);\n  }\n\n  function tokenize(\n    this: TokenizeContext,\n    effects: Effects,\n    ok: State,\n    nok: State,\n  ): State {\n    return start;\n\n    function start(code: Code) {\n      if (!code || markdownLineEnding(code) || code === codes.eof) {\n        return nok(code);\n      }\n\n      effects.enter(\"taggable\");\n      effects.enter(\"taggableMarker\");\n      return consumeMarker;\n    }\n\n    function consumeMarker(code: Code) {\n      if (!code || !typeMap.has(String.fromCodePoint(code))) {\n        return nok(code);\n      }\n\n      effects.consume(code);\n\n      effects.exit(\"taggableMarker\");\n      effects.enter(\"taggableValue\");\n\n      return consumeValue;\n    }\n\n    function consumeValue(code: Code) {\n      if (\n        !code ||\n        markdownLineEnding(code) ||\n        code === codes.eof ||\n        !(allowEmail\n          ? /[\\p{L}\\p{M}@.]/u.test(String.fromCodePoint(code))\n          : /[\\p{L}\\p{M}]/u.test(String.fromCodePoint(code)))\n      ) {\n        if (valueCursor < 1) {\n          return nok(code);\n        } else {\n          effects.exit(\"taggableValue\");\n          effects.exit(\"taggable\");\n          return ok(code);\n        }\n      }\n\n      valueCursor++;\n      effects.consume(code);\n      return consumeValue;\n    }\n  }\n\n  // Marker-hooks\n  const text: { [c: number]: Construct } = {};\n\n  for (const i of markers) {\n    text[i.codePointAt(0)!] = { tokenize: tokenize };\n  }\n\n  return { text };\n}\n","import { InlineTaggableNode, defaultOptions, Options } from \"./options\";\nimport type {\n  CompileContext,\n  Token,\n  HtmlExtension,\n} from \"micromark-util-types\";\n\ndeclare module \"micromark-util-types\" {\n  interface TokenTypeMap {\n    taggable: \"taggable\";\n    taggableMarker: \"taggableMarker\";\n    taggableValue: \"taggableValue\";\n  }\n}\n\ndeclare module \"micromark-util-types\" {\n  interface CompileData {\n    taggableStack: InlineTaggableNode;\n  }\n}\n\nexport function html(opts: Options = defaultOptions): HtmlExtension {\n  opts = opts ? opts : defaultOptions;\n  if (opts.allowEmail == undefined) opts.allowEmail = false;\n  const markers: Array<string> = [];\n  const typeMap = new Map<string, string>();\n  const urlResolverMap = new Map<string, (string: string) => string>();\n  const cls = opts.classes ? opts.classes : [\"micromark-taggable\"];\n  const clsMap = new Map<string, Array<string>>();\n\n  for (const i of opts.rules) {\n    markers.push(i.marker);\n    typeMap.set(i.marker, i.type);\n    urlResolverMap.set(i.marker, i.toUrl);\n    if (i.classes) {\n      clsMap.set(i.marker, i.classes);\n    }\n  }\n\n  function enterTaggable(this: CompileContext): undefined {\n    this.setData(\"taggableStack\", {\n      type: \"taggable\",\n      value: \"\",\n      data: {\n        marker: \"\",\n        type: \"\",\n        url: \"\",\n      },\n    });\n  }\n\n  function exitTaggableMarker(this: CompileContext, token: Token): undefined {\n    const marker = this.sliceSerialize(token);\n    const current: InlineTaggableNode = this.getData(\"taggableStack\");\n    current.data.marker = marker;\n  }\n\n  function exitTaggableValue(this: CompileContext, token: Token): undefined {\n    const value = this.sliceSerialize(token);\n    const current = this.getData(\"taggableStack\");\n    current.value = value;\n  }\n\n  function exitTaggable(this: CompileContext): undefined {\n    const taggable = this.getData(\"taggableStack\");\n\n    const marker = taggable.data.marker;\n    const value = taggable.value;\n\n    this.tag(\n      '<a href=\"' +\n        urlResolverMap.get(marker)!(value) +\n        '\" class=\"' +\n        cls.join(\" \") +\n        (clsMap.get(marker) ? \" \" + clsMap.get(marker)!.join(\" \") : \"\") +\n        '\">',\n    );\n    this.raw(marker + value);\n    this.tag(\"</a>\");\n  }\n\n  return {\n    enter: {\n      taggable: enterTaggable,\n    },\n    exit: {\n      taggableMarker: exitTaggableMarker,\n      taggableValue: exitTaggableValue,\n      taggable: exitTaggable,\n    },\n  };\n}\n"],"names":[],"mappings":"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"}